if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
    var msViewportStyle = document.createElement("style");
    msViewportStyle.appendChild(document.createTextNode("@-ms-viewport{width:auto!important}")), 
    document.getElementsByTagName("head")[0].appendChild(msViewportStyle);
}

var abp = abp || {};

!function(a) {
    abp.appPath = abp.appPath || "/", abp.pageLoadTime = new Date(), abp.toAbsAppPath = function(a) {
        return 0 == a.indexOf("/") && (a = a.substring(1)), abp.appPath + a;
    }, abp.multiTenancy = abp.multiTenancy || {}, abp.multiTenancy.isEnabled = !1, abp.multiTenancy.sides = {
        TENANT: 1,
        HOST: 2
    }, abp.multiTenancy.tenantIdCookieName = "Abp.TenantId", abp.multiTenancy.setTenantIdCookie = function(a) {
        a ? abp.utils.setCookieValue(abp.multiTenancy.tenantIdCookieName, a.toString(), new Date(new Date().getTime() + 15768e7), abp.appPath) : abp.utils.deleteCookie(abp.multiTenancy.tenantIdCookieName, abp.appPath);
    }, abp.multiTenancy.getTenantIdCookie = function() {
        var a = abp.utils.getCookieValue(abp.multiTenancy.tenantIdCookieName);
        return a ? parseInt(a) : null;
    }, abp.session = abp.session || {
        multiTenancySide: abp.multiTenancy.sides.HOST
    }, abp.localization = abp.localization || {}, abp.localization.languages = [], abp.localization.currentLanguage = {}, 
    abp.localization.sources = [], abp.localization.values = {}, abp.localization.localize = function(a, b) {
        b = b || abp.localization.defaultSourceName;
        var c = abp.localization.values[b];
        if (!c) return abp.log.warn("Could not find localization source: " + b), a;
        var d = c[a];
        if (void 0 == d) return a;
        var e = Array.prototype.slice.call(arguments, 0);
        return e.splice(1, 1), e[0] = d, abp.utils.formatString.apply(this, e);
    }, abp.localization.getSource = function(a) {
        return function(b) {
            var c = Array.prototype.slice.call(arguments, 0);
            return c.splice(1, 0, a), abp.localization.localize.apply(this, c);
        };
    }, abp.localization.isCurrentCulture = function(a) {
        return abp.localization.currentCulture && abp.localization.currentCulture.name && 0 == abp.localization.currentCulture.name.indexOf(a);
    }, abp.localization.defaultSourceName = void 0, abp.localization.abpWeb = abp.localization.getSource("AbpWeb"), 
    abp.auth = abp.auth || {}, abp.auth.allPermissions = abp.auth.allPermissions || {}, 
    abp.auth.grantedPermissions = abp.auth.grantedPermissions || {}, abp.auth.hasPermission = function(a) {
        return abp.auth.isGranted.apply(this, arguments);
    }, abp.auth.hasAnyOfPermissions = function() {
        return abp.auth.isAnyGranted.apply(this, arguments);
    }, abp.auth.hasAllOfPermissions = function() {
        return abp.auth.areAllGranted.apply(this, arguments);
    }, abp.auth.isGranted = function(a) {
        return void 0 != abp.auth.allPermissions[a] && void 0 != abp.auth.grantedPermissions[a];
    }, abp.auth.isAnyGranted = function() {
        if (!arguments || arguments.length <= 0) return !0;
        for (var a = 0; a < arguments.length; a++) if (abp.auth.isGranted(arguments[a])) return !0;
        return !1;
    }, abp.auth.areAllGranted = function() {
        if (!arguments || arguments.length <= 0) return !0;
        for (var a = 0; a < arguments.length; a++) if (!abp.auth.isGranted(arguments[a])) return !1;
        return !0;
    }, abp.auth.tokenCookieName = "Abp.AuthToken", abp.auth.setToken = function(a, b) {
        abp.utils.setCookieValue(abp.auth.tokenCookieName, a, b, abp.appPath);
    }, abp.auth.getToken = function() {
        return abp.utils.getCookieValue(abp.auth.tokenCookieName);
    }, abp.auth.clearToken = function() {
        abp.auth.setToken();
    }, abp.features = abp.features || {}, abp.features.allFeatures = abp.features.allFeatures || {}, 
    abp.features.get = function(a) {
        return abp.features.allFeatures[a];
    }, abp.features.getValue = function(a) {
        var b = abp.features.get(a);
        if (void 0 != b) return b.value;
    }, abp.features.isEnabled = function(a) {
        var b = abp.features.getValue(a);
        return "true" == b || "True" == b;
    }, abp.setting = abp.setting || {}, abp.setting.values = abp.setting.values || {}, 
    abp.setting.get = function(a) {
        return abp.setting.values[a];
    }, abp.setting.getBoolean = function(a) {
        var b = abp.setting.get(a);
        return "true" == b || "True" == b;
    }, abp.setting.getInt = function(a) {
        return parseInt(abp.setting.values[a]);
    }, abp.notifications = abp.notifications || {}, abp.notifications.severity = {
        INFO: 0,
        SUCCESS: 1,
        WARN: 2,
        ERROR: 3,
        FATAL: 4
    }, abp.notifications.userNotificationState = {
        UNREAD: 0,
        READ: 1
    }, abp.notifications.getUserNotificationStateAsString = function(a) {
        switch (a) {
          case abp.notifications.userNotificationState.READ:
            return "READ";

          case abp.notifications.userNotificationState.UNREAD:
            return "UNREAD";

          default:
            return abp.log.warn("Unknown user notification state value: " + a), "?";
        }
    }, abp.notifications.getUiNotifyFuncBySeverity = function(a) {
        switch (a) {
          case abp.notifications.severity.SUCCESS:
            return abp.notify.success;

          case abp.notifications.severity.WARN:
            return abp.notify.warn;

          case abp.notifications.severity.ERROR:
            return abp.notify.error;

          case abp.notifications.severity.FATAL:
            return abp.notify.error;

          case abp.notifications.severity.INFO:
          default:
            return abp.notify.info;
        }
    }, abp.notifications.messageFormatters = {}, abp.notifications.messageFormatters["Abp.Notifications.MessageNotificationData"] = function(a) {
        return a.notification.data.message || a.notification.data.properties.Message;
    }, abp.notifications.messageFormatters["Abp.Notifications.LocalizableMessageNotificationData"] = function(b) {
        var c = b.notification.data.message || b.notification.data.properties.Message, d = abp.localization.localize(c.name, c.sourceName);
        if (b.notification.data.properties) if (a) a.each(b.notification.data.properties, function(a, b) {
            d = d.replace("{" + a + "}", b);
        }); else for (var e = Object.keys(b.notification.data.properties), f = 0; f < e.length; f++) d = d.replace("{" + e[f] + "}", b.notification.data.properties[e[f]]);
        return d;
    }, abp.notifications.getFormattedMessageFromUserNotification = function(a) {
        var b = abp.notifications.messageFormatters[a.notification.data.type];
        return b ? abp.utils.isFunction(b) ? b(a) : (abp.log.warn("Message formatter should be a function! It is invalid for data type: " + a.notification.data.type), 
        "?") : (abp.log.warn("No message formatter defined for given data type: " + a.notification.data.type), 
        "?");
    }, abp.notifications.showUiNotifyForUserNotification = function(a, b) {
        var c = abp.notifications.getFormattedMessageFromUserNotification(a), d = abp.notifications.getUiNotifyFuncBySeverity(a.notification.severity);
        d(c, void 0, b);
    }, abp.log = abp.log || {}, abp.log.levels = {
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        FATAL: 5
    }, abp.log.level = abp.log.levels.DEBUG, abp.log.log = function(a, b) {
        window.console && window.console.log && (void 0 != b && b < abp.log.level || console.log(a));
    }, abp.log.debug = function(a) {
        abp.log.log("DEBUG: ", abp.log.levels.DEBUG), abp.log.log(a, abp.log.levels.DEBUG);
    }, abp.log.info = function(a) {
        abp.log.log("INFO: ", abp.log.levels.INFO), abp.log.log(a, abp.log.levels.INFO);
    }, abp.log.warn = function(a) {
        abp.log.log("WARN: ", abp.log.levels.WARN), abp.log.log(a, abp.log.levels.WARN);
    }, abp.log.error = function(a) {
        abp.log.log("ERROR: ", abp.log.levels.ERROR), abp.log.log(a, abp.log.levels.ERROR);
    }, abp.log.fatal = function(a) {
        abp.log.log("FATAL: ", abp.log.levels.FATAL), abp.log.log(a, abp.log.levels.FATAL);
    }, abp.notify = abp.notify || {}, abp.notify.success = function(a, b, c) {
        abp.log.warn("abp.notify.success is not implemented!");
    }, abp.notify.info = function(a, b, c) {
        abp.log.warn("abp.notify.info is not implemented!");
    }, abp.notify.warn = function(a, b, c) {
        abp.log.warn("abp.notify.warn is not implemented!");
    }, abp.notify.error = function(a, b, c) {
        abp.log.warn("abp.notify.error is not implemented!");
    }, abp.message = abp.message || {};
    var b = function(b, c) {
        return alert((c || "") + " " + b), a ? a.Deferred(function(a) {
            a.resolve();
        }) : (abp.log.warn("abp.message can not return promise since jQuery is not defined!"), 
        null);
    };
    abp.message.info = function(a, c) {
        return abp.log.warn("abp.message.info is not implemented!"), b(a, c);
    }, abp.message.success = function(a, c) {
        return abp.log.warn("abp.message.success is not implemented!"), b(a, c);
    }, abp.message.warn = function(a, c) {
        return abp.log.warn("abp.message.warn is not implemented!"), b(a, c);
    }, abp.message.error = function(a, c) {
        return abp.log.warn("abp.message.error is not implemented!"), b(a, c);
    }, abp.message.confirm = function(b, c, d) {
        abp.log.warn("abp.message.confirm is not implemented!"), c && "string" != typeof c && (d = c);
        var e = confirm(b);
        return d && d(e), a ? a.Deferred(function(a) {
            a.resolve();
        }) : (abp.log.warn("abp.message can not return promise since jQuery is not defined!"), 
        null);
    }, abp.ui = abp.ui || {}, abp.ui.block = function(a) {
        abp.log.warn("abp.ui.block is not implemented!");
    }, abp.ui.unblock = function(a) {
        abp.log.warn("abp.ui.unblock is not implemented!");
    }, abp.ui.setBusy = function(a, b) {
        abp.log.warn("abp.ui.setBusy is not implemented!");
    }, abp.ui.clearBusy = function(a) {
        abp.log.warn("abp.ui.clearBusy is not implemented!");
    }, abp.event = function() {
        var a = {}, b = function(b, c) {
            a[b] || (a[b] = []), a[b].push(c);
        }, c = function(b, c) {
            var d = a[b];
            if (d) {
                for (var e = -1, f = 0; f < d.length; f++) if (d[f] === c) {
                    e = f;
                    break;
                }
                e < 0 || a[b].splice(e, 1);
            }
        }, d = function(b) {
            var c = a[b];
            if (c && c.length) for (var d = Array.prototype.slice.call(arguments, 1), e = 0; e < c.length; e++) c[e].apply(this, d);
        };
        return {
            on: b,
            off: c,
            trigger: d
        };
    }(), abp.utils = abp.utils || {}, abp.utils.createNamespace = function(a, b) {
        for (var c = b.split("."), d = 0; d < c.length; d++) "undefined" == typeof a[c[d]] && (a[c[d]] = {}), 
        a = a[c[d]];
        return a;
    }, abp.utils.replaceAll = function(a, b, c) {
        var d = b.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        return a.replace(new RegExp(d, "g"), c);
    }, abp.utils.formatString = function() {
        if (arguments.length < 1) return null;
        for (var a = arguments[0], b = 1; b < arguments.length; b++) {
            var c = "{" + (b - 1) + "}";
            a = abp.utils.replaceAll(a, c, arguments[b]);
        }
        return a;
    }, abp.utils.toPascalCase = function(a) {
        return a && a.length ? 1 === a.length ? a.charAt(0).toUpperCase() : a.charAt(0).toUpperCase() + a.substr(1) : a;
    }, abp.utils.toCamelCase = function(a) {
        return a && a.length ? 1 === a.length ? a.charAt(0).toLowerCase() : a.charAt(0).toLowerCase() + a.substr(1) : a;
    }, abp.utils.truncateString = function(a, b) {
        return !a || !a.length || a.length <= b ? a : a.substr(0, b);
    }, abp.utils.truncateStringWithPostfix = function(a, b, c) {
        return c = c || "...", !a || !a.length || a.length <= b ? a : b <= c.length ? c.substr(0, b) : a.substr(0, b - c.length) + c;
    }, abp.utils.isFunction = function(b) {
        return a ? a.isFunction(b) : !!(b && b.constructor && b.call && b.apply);
    }, abp.utils.buildQueryString = function(a, b) {
        function c() {
            d.length ? d += "&" : b && (d += "?");
        }
        void 0 === b && (b = !0);
        for (var d = "", e = 0; e < a.length; ++e) {
            var f = a[e];
            if (void 0 !== f.value) if (null === f.value && (f.value = ""), c(), f.value.toJSON && "function" == typeof f.value.toJSON) d = d + f.name + "=" + encodeURIComponent(f.value.toJSON()); else if (Array.isArray(f.value) && f.value.length) for (var g = 0; g < f.value.length; g++) g > 0 && c(), 
            d = d + f.name + "[" + g + "]=" + encodeURIComponent(f.value[g]); else d = d + f.name + "=" + encodeURIComponent(f.value);
        }
        return d;
    }, abp.utils.setCookieValue = function(a, b, c, d) {
        var e = encodeURIComponent(a) + "=";
        b && (e += encodeURIComponent(b)), c && (e = e + "; expires=" + c.toUTCString()), 
        d && (e = e + "; path=" + d), document.cookie = e;
    }, abp.utils.getCookieValue = function(a) {
        for (var b = document.cookie.split("; "), c = 0; c < b.length; c++) if (b[c]) {
            var d = b[c].split("=");
            if (2 == d.length && decodeURIComponent(d[0]) === a) return decodeURIComponent(d[1] || "");
        }
        return null;
    }, abp.utils.deleteCookie = function(a, b) {
        var c = encodeURIComponent(a) + "=";
        c = c + "; expires=" + new Date(new Date().getTime() - 864e5).toUTCString(), b && (c = c + "; path=" + b), 
        document.cookie = c;
    }, abp.timing = abp.timing || {}, abp.timing.utcClockProvider = function() {
        var a = function(a) {
            return Date.UTC(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate(), a.getUTCHours(), a.getUTCMinutes(), a.getUTCSeconds(), a.getUTCMilliseconds());
        }, b = function() {
            return new Date();
        }, c = function(b) {
            return b ? new Date(a(b)) : b;
        };
        return {
            now: b,
            normalize: c,
            supportsMultipleTimezone: !0
        };
    }(), abp.timing.localClockProvider = function() {
        var a = function(a) {
            return new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), a.getSeconds(), a.getMilliseconds());
        }, b = function() {
            return a(new Date());
        }, c = function(b) {
            return b ? a(b) : b;
        };
        return {
            now: b,
            normalize: c,
            supportsMultipleTimezone: !1
        };
    }(), abp.timing.unspecifiedClockProvider = function() {
        var a = function() {
            return new Date();
        }, b = function(a) {
            return a;
        };
        return {
            now: a,
            normalize: b,
            supportsMultipleTimezone: !1
        };
    }(), abp.timing.convertToUserTimezone = function(a) {
        var b = a.getTime(), c = b + 6e4 * a.getTimezoneOffset(), d = parseInt(c) + parseInt(abp.timing.timeZoneInfo.windows.currentUtcOffsetInMilliseconds);
        return new Date(d);
    }, abp.clock = abp.clock || {}, abp.clock.now = function() {
        return abp.clock.provider ? abp.clock.provider.now() : new Date();
    }, abp.clock.normalize = function(a) {
        return abp.clock.provider ? abp.clock.provider.normalize(a) : a;
    }, abp.clock.provider = abp.timing.unspecifiedClockProvider, abp.security = abp.security || {}, 
    abp.security.antiForgery = abp.security.antiForgery || {}, abp.security.antiForgery.tokenCookieName = "XSRF-TOKEN", 
    abp.security.antiForgery.tokenHeaderName = "X-XSRF-TOKEN", abp.security.antiForgery.getToken = function() {
        return abp.utils.getCookieValue(abp.security.antiForgery.tokenCookieName);
    };
}(jQuery);

var abp = abp || {};

!function(a) {
    a && (abp.ajax = function(b) {
        b = b || {};
        var c = a.extend({}, abp.ajax.defaultOpts, b);
        return c.success = void 0, c.error = void 0, a.Deferred(function(d) {
            a.ajax(c).done(function(a, c, e) {
                a.__abp ? abp.ajax.handleResponse(a, b, d, e) : (d.resolve(a), b.success && b.success(a));
            }).fail(function(a) {
                a.responseJSON && a.responseJSON.__abp ? abp.ajax.handleResponse(a.responseJSON, b, d, a) : abp.ajax.handleNonAbpErrorResponse(a, b, d);
            });
        });
    }, a.extend(abp.ajax, {
        defaultOpts: {
            dataType: "json",
            type: "POST",
            contentType: "application/json"
        },
        defaultError: {
            message: "An error has occurred!",
            details: "Error detail not sent by server."
        },
        defaultError401: {
            message: "You are not authenticated!",
            details: "You should be authenticated (sign in) in order to perform this operation."
        },
        defaultError403: {
            message: "You are not authorized!",
            details: "You are not allowed to perform this operation."
        },
        defaultError404: {
            message: "Resource not found!",
            details: "The resource requested could not found on the server."
        },
        logError: function(a) {
            abp.log.error(a);
        },
        showError: function(a) {
            return a.details ? abp.message.error(a.details, a.message) : abp.message.error(a.message || abp.ajax.defaultError.message);
        },
        handleTargetUrl: function(a) {
            a ? location.href = a : location.href = abp.appPath;
        },
        handleNonAbpErrorResponse: function(a, b, c) {
            if (b.abpHandleError !== !1) switch (a.status) {
              case 401:
                abp.ajax.handleUnAuthorizedRequest(abp.ajax.showError(abp.ajax.defaultError401), abp.appPath);
                break;

              case 403:
                abp.ajax.showError(abp.ajax.defaultError403);
                break;

              case 404:
                abp.ajax.showError(abp.ajax.defaultError404);
                break;

              default:
                abp.ajax.showError(abp.ajax.defaultError);
            }
            c.reject.apply(this, arguments), b.error && b.error.apply(this, arguments);
        },
        handleUnAuthorizedRequest: function(a, b) {
            a ? a.done(function() {
                abp.ajax.handleTargetUrl(b);
            }) : abp.ajax.handleTargetUrl(b);
        },
        handleResponse: function(a, b, c, d) {
            if (a) if (a.success === !0) c && c.resolve(a.result, a, d), b.success && b.success(a.result, a, d), 
            a.targetUrl && abp.ajax.handleTargetUrl(a.targetUrl); else if (a.success === !1) {
                var e = null;
                a.error ? b.abpHandleError !== !1 && (e = abp.ajax.showError(a.error)) : a.error = abp.ajax.defaultError, 
                abp.ajax.logError(a.error), c && c.reject(a.error, d), b.error && b.error(a.error, d), 
                401 === d.status && b.abpHandleError !== !1 && abp.ajax.handleUnAuthorizedRequest(e, a.targetUrl);
            } else c && c.resolve(a, null, d), b.success && b.success(a, null, d); else c && c.resolve(d), 
            b.success && b.success(d);
        },
        blockUI: function(a) {
            a.blockUI && (a.blockUI === !0 ? abp.ui.setBusy() : abp.ui.setBusy(a.blockUI));
        },
        unblockUI: function(a) {
            a.blockUI && (a.blockUI === !0 ? abp.ui.clearBusy() : abp.ui.clearBusy(a.blockUI));
        },
        ajaxSendHandler: function(a, b, c) {
            var d = abp.security.antiForgery.getToken();
            d && (c.headers && void 0 !== c.headers[abp.security.antiForgery.tokenHeaderName] || b.setRequestHeader(abp.security.antiForgery.tokenHeaderName, d));
        }
    }), a(document).ajaxSend(function(a, b, c) {
        return abp.ajax.ajaxSendHandler(a, b, c);
    }), a.fn.ajaxForm && (a.fn.abpAjaxForm = function(b) {
        b = b || {};
        var c = a.extend({}, a.fn.abpAjaxForm.defaults, b);
        return c.beforeSubmit = function() {
            abp.ajax.blockUI(c), b.beforeSubmit && b.beforeSubmit.apply(this, arguments);
        }, c.success = function(a) {
            abp.ajax.handleResponse(a, b);
        }, c.complete = function() {
            abp.ajax.unblockUI(c), b.complete && b.complete.apply(this, arguments);
        }, this.ajaxForm(c);
    }, a.fn.abpAjaxForm.defaults = {
        method: "POST"
    }), abp.event.on("abp.dynamicScriptsInitialized", function() {
        abp.ajax.defaultError.message = abp.localization.abpWeb("DefaultError"), abp.ajax.defaultError.details = abp.localization.abpWeb("DefaultErrorDetail"), 
        abp.ajax.defaultError401.message = abp.localization.abpWeb("DefaultError401"), abp.ajax.defaultError401.details = abp.localization.abpWeb("DefaultErrorDetail401"), 
        abp.ajax.defaultError403.message = abp.localization.abpWeb("DefaultError403"), abp.ajax.defaultError403.details = abp.localization.abpWeb("DefaultErrorDetail403"), 
        abp.ajax.defaultError404.message = abp.localization.abpWeb("DefaultError404"), abp.ajax.defaultError404.details = abp.localization.abpWeb("DefaultErrorDetail404");
    }));
}(jQuery);

var abp = abp || {};

!function() {
    if (toastr) {
        toastr.options.positionClass = "toast-bottom-right";
        var a = function(a, b, c, d) {
            toastr[a](b, c, d);
        };
        abp.notify.success = function(b, c, d) {
            a("success", b, c, d);
        }, abp.notify.info = function(b, c, d) {
            a("info", b, c, d);
        }, abp.notify.warn = function(b, c, d) {
            a("warning", b, c, d);
        }, abp.notify.error = function(b, c, d) {
            a("error", b, c, d);
        };
    }
}();

var abp = abp || {};

!function() {
    $.blockUI && ($.extend($.blockUI.defaults, {
        message: " ",
        css: {},
        overlayCSS: {
            backgroundColor: "#AAA",
            opacity: .3,
            cursor: "wait"
        }
    }), abp.ui.block = function(a) {
        a ? $(a).block() : $.blockUI();
    }, abp.ui.unblock = function(a) {
        a ? $(a).unblock() : $.unblockUI();
    });
}();

var abp = abp || {};

!function() {
    $.fn.spin && (abp.libs = abp.libs || {}, abp.libs.spinjs = {
        spinner_config: {
            lines: 11,
            length: 0,
            width: 10,
            radius: 20,
            corners: 1,
            trail: 60,
            speed: 1.2
        },
        spinner_config_inner_busy_indicator: {
            lines: 11,
            length: 0,
            width: 4,
            radius: 7,
            corners: 1,
            trail: 60,
            speed: 1.2
        }
    }, abp.ui.setBusy = function(a, b) {
        b = b || {}, (b.always || b.finally) && (b = {
            promise: b
        });
        var c = $.extend({}, b);
        if (a) {
            var d = $(a), e = d.find(".abp-busy-indicator");
            e.length ? e.spin(abp.libs.spinjs.spinner_config_inner_busy_indicator) : (0 != c.blockUI && abp.ui.block(a), 
            d.spin(abp.libs.spinjs.spinner_config));
        } else 0 != c.blockUI && abp.ui.block(), $("body").spin(abp.libs.spinjs.spinner_config);
        c.promise && (c.promise.always ? c.promise.always(function() {
            abp.ui.clearBusy(a);
        }) : c.promise.finally && c.promise.finally(function() {
            abp.ui.clearBusy(a);
        }));
    }, abp.ui.clearBusy = function(a) {
        if (a) {
            var b = $(a), c = b.find(".abp-busy-indicator");
            c.length ? c.spin(!1) : (abp.ui.unblock(a), b.spin(!1));
        } else abp.ui.unblock(), $("body").spin(!1);
    });
}(), function(a, b) {
    function c(a, b) {
        return !(b.length > a.length) && a.indexOf(b, a.length - b.length) !== -1;
    }
    if (b) {
        a.ng = a.ng || {}, a.ng.http = {
            defaultError: {
                message: "An error has occurred!",
                details: "Error detail not sent by server."
            },
            defaultError401: {
                message: "You are not authenticated!",
                details: "You should be authenticated (sign in) in order to perform this operation."
            },
            defaultError403: {
                message: "You are not authorized!",
                details: "You are not allowed to perform this operation."
            },
            defaultError404: {
                message: "Resource not found!",
                details: "The resource requested could not found on the server."
            },
            logError: function(b) {
                a.log.error(b);
            },
            showError: function(b) {
                return b.details ? a.message.error(b.details, b.message || a.ng.http.defaultError.message) : a.message.error(b.message || a.ng.http.defaultError.message);
            },
            handleTargetUrl: function(b) {
                b ? location.href = b : location.href = a.appPath;
            },
            handleNonAbpErrorResponse: function(b, c) {
                if (b.config.abpHandleError !== !1) switch (b.status) {
                  case 401:
                    a.ng.http.handleUnAuthorizedRequest(a.ng.http.showError(a.ng.http.defaultError401), a.appPath);
                    break;

                  case 403:
                    a.ng.http.showError(a.ajax.defaultError403);
                    break;

                  case 404:
                    a.ng.http.showError(a.ajax.defaultError404);
                    break;

                  default:
                    a.ng.http.showError(a.ng.http.defaultError);
                }
                c.reject(b);
            },
            handleUnAuthorizedRequest: function(b, c) {
                b ? b.done(function() {
                    a.ng.http.handleTargetUrl(c || a.appPath);
                }) : a.ng.http.handleTargetUrl(c || a.appPath);
            },
            handleResponse: function(b, c) {
                var d = b.data;
                if (d.success === !0) b.data = d.result, c.resolve(b), d.targetUrl && a.ng.http.handleTargetUrl(d.targetUrl); else if (d.success === !1) {
                    var e = null;
                    d.error ? b.config.abpHandleError !== !1 && (e = a.ng.http.showError(d.error)) : d.error = defaultError, 
                    a.ng.http.logError(d.error), b.data = d.error, c.reject(b), 401 == b.status && b.config.abpHandleError !== !1 && a.ng.http.handleUnAuthorizedRequest(e, d.targetUrl);
                } else c.resolve(b);
            }
        };
        var d = b.module("abp", []);
        d.config([ "$httpProvider", function(b) {
            b.interceptors.push([ "$q", function(b) {
                return {
                    request: function(b) {
                        return c(b.url, ".cshtml") && (b.url = a.appPath + "AbpAppView/Load?viewUrl=" + b.url + "&_t=" + a.pageLoadTime.getTime()), 
                        b;
                    },
                    response: function(c) {
                        if (!c.data || !c.data.__abp) return c;
                        var d = b.defer();
                        return a.ng.http.handleResponse(c, d), d.promise;
                    },
                    responseError: function(c) {
                        var d = b.defer();
                        return c.data && c.data.__abp ? a.ng.http.handleResponse(c, d) : a.ng.http.handleNonAbpErrorResponse(c, d), 
                        d.promise;
                    }
                };
            } ]);
        } ]), a.event.on("abp.dynamicScriptsInitialized", function() {
            a.ng.http.defaultError.message = a.localization.abpWeb("DefaultError"), a.ng.http.defaultError.details = a.localization.abpWeb("DefaultErrorDetail"), 
            a.ng.http.defaultError401.message = a.localization.abpWeb("DefaultError401"), a.ng.http.defaultError401.details = a.localization.abpWeb("DefaultErrorDetail401"), 
            a.ng.http.defaultError403.message = a.localization.abpWeb("DefaultError403"), a.ng.http.defaultError403.details = a.localization.abpWeb("DefaultErrorDetail403"), 
            a.ng.http.defaultError404.message = a.localization.abpWeb("DefaultError404"), a.ng.http.defaultError404.details = a.localization.abpWeb("DefaultErrorDetail404");
        });
    }
}(abp || (abp = {}), angular || void 0);

var abp = abp || {};

!function(a) {
    if (sweetAlert && a) {
        abp.libs = abp.libs || {}, abp.libs.sweetAlert = {
            config: {
                default: {},
                info: {
                    type: "info"
                },
                success: {
                    type: "success"
                },
                warn: {
                    type: "warning"
                },
                error: {
                    type: "error"
                },
                confirm: {
                    type: "warning",
                    title: "Are you sure?",
                    showCancelButton: !0,
                    cancelButtonText: "Cancel",
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes"
                }
            }
        };
        var b = function(b, c, d) {
            d || (d = c, c = void 0);
            var e = a.extend({}, abp.libs.sweetAlert.config.default, abp.libs.sweetAlert.config[b], {
                title: d,
                text: c
            });
            return a.Deferred(function(a) {
                sweetAlert(e, function() {
                    a.resolve();
                });
            });
        };
        abp.message.info = function(a, c) {
            return b("info", a, c);
        }, abp.message.success = function(a, c) {
            return b("success", a, c);
        }, abp.message.warn = function(a, c) {
            return b("warn", a, c);
        }, abp.message.error = function(a, c) {
            return b("error", a, c);
        }, abp.message.confirm = function(b, c, d) {
            var e = {
                text: b
            };
            a.isFunction(c) ? d = c : c && (e.title = c);
            var f = a.extend({}, abp.libs.sweetAlert.config.default, abp.libs.sweetAlert.config.confirm, e);
            return a.Deferred(function(a) {
                sweetAlert(f, function(b) {
                    d && d(b), a.resolve(b);
                });
            });
        }, abp.event.on("abp.dynamicScriptsInitialized", function() {
            abp.libs.sweetAlert.config.confirm.title = abp.localization.abpWeb("AreYouSure"), 
            abp.libs.sweetAlert.config.confirm.cancelButtonText = abp.localization.abpWeb("Cancel"), 
            abp.libs.sweetAlert.config.confirm.confirmButtonText = abp.localization.abpWeb("Yes");
        });
    }
}(jQuery);